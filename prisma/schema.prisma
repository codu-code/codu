// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id            String         @id @unique
  title         String
  canonicalUrl  String?
  coverImage    String?
  approved      Boolean        @default(true)
  body          String         @db.Text()
  excerpt       String         @default("") @db.VarChar(156)
  readTimeMins  Int
  published     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  slug          String         @unique
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  tags          PostTag[]
  likes         Like[]
  bookmarks     Bookmark[]
  comments      Comment[]
  notifications Notification[]
  showComments  Boolean        @default(true)
  Flagged       Flagged[]
}

model Tag {
  createdAt DateTime  @default(now())
  id        Int       @id @default(autoincrement())
  title     String    @unique @db.VarChar(20)
  PostTag   PostTag[]
}

model PostTag {
  id     Int    @id @default(autoincrement())
  tagId  Int
  postId String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique(fields: [tagId, postId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String         @id @default(cuid())
  username               String?        @unique @db.VarChar(40)
  name                   String         @default("")
  email                  String?        @unique
  emailVerified          DateTime?
  image                  String         @default("/images/person.png")
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  bio                    String         @default("") @db.VarChar(200)
  location               String         @default("")
  websiteUrl             String         @default("")
  emailNotifications     Boolean        @default(true)
  newsletter             Boolean        @default(true)
  firstName           	 String?    	 
  surname             	 String?   	 
  gender              	 String?    	 
  dateOfBirth         	 DateTime?
  professionalOrStudent  String?
  workplace           	 String?
  jobTitle            	 String?
  levelOfStudy        	 String?
  course              	 String?
  accounts               Account[]
  sessions               Session[]
  posts                  Post[]
  role                   Role           @default(USER)
  likes                  Like[]
  bookmarks              Bookmark[]
  comments               Comment[]
  notification           Notification[]
  notfier                Notification[] @relation("notifier")
  BannedUsers            BannedUsers?
  bans                   BannedUsers[]  @relation("bannedBy")
  Flagged                Flagged[]
  flaggedNotifier        Flagged[]      @relation("notifier")
  RSVP                   RSVP[]
  memberships            Membership[]

  @@index(fields: [username, id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model Bookmark {
  id     Int    @id @default(autoincrement())
  postId String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id           Int            @id @default(autoincrement())
  body         String         @db.Text()
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  postId       String
  userId       String
  parentId     Int?
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  children     Comment[]      @relation("Comment_Children")
  parent       Comment?       @relation("Comment_Children", fields: [parentId], references: [id], onDelete: Cascade)
  likes        Like[]
  Notification Notification[]
  Flagged      Flagged[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    String
  postId    String?
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@unique([userId, postId])
}

model Notification {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  type       Int
  userId     String
  postId     String?
  commentId  Int?
  notifierId String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  notifier   User?    @relation(name: "notifier", fields: [notifierId], references: [id], onDelete: Cascade)
}

model BannedUsers {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String   @unique
  bannedById String
  note       String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bannedBy   User     @relation(name: "bannedBy", fields: [bannedById], references: [id], onDelete: Cascade)
}

model Flagged {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  notifierId String
  note       String?
  postId     String?
  commentId  Int?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  notifier   User?    @relation(name: "notifier", fields: [notifierId], references: [id], onDelete: Cascade)
}

model Community {
  id          String         @id @unique
  name        String
  city        String
  country     String
  coverImage  String
  description String         @db.Text()
  excerpt     String         @default("") @db.VarChar(156)
  slug        String         @unique
  events      Event[]
  members     Membership[]
}

model Event {
  id          String    @id @unique
  eventDate   DateTime
  name        String
  coverImage  String
  address     String
  capacity    Int
  description String    @db.Text()
  slug        String    @unique
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
  RSVP        RSVP[]
}

model Membership {
  id               String @id 
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  community        Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId      String
  isEventOrganiser Boolean
  createdAt  DateTime @default(now())
}

model RSVP {
  id      String @id 
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
  createdAt  DateTime @default(now())
}
