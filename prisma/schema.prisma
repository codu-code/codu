generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id            String         @id @unique
  title         String
  canonicalUrl  String?
  coverImage    String?
  approved      Boolean        @default(true)
  body          String
  excerpt       String         @default("") @db.VarChar(156)
  readTimeMins  Int
  published     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  slug          String         @unique
  userId        String
  showComments  Boolean        @default(true)
  bookmarks     Bookmark[]
  comments      Comment[]
  Flagged       Flagged[]
  likes         Like[]
  notifications Notification[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags          PostTag[]
}

model Tag {
  createdAt DateTime  @default(now())
  id        Int       @id @default(autoincrement())
  title     String    @unique @db.VarChar(20)
  PostTag   PostTag[]
}

model PostTag {
  id     Int    @id @default(autoincrement())
  tagId  Int
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([tagId, postId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String         @id @default(cuid())
  username           String?        @unique @db.VarChar(40)
  name               String         @default("")
  email              String?        @unique
  emailVerified      DateTime?
  image              String         @default("/images/person.png")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  bio                String         @default("") @db.VarChar(200)
  location           String         @default("")
  websiteUrl         String         @default("")
  emailNotifications Boolean        @default(true)
  newsletter         Boolean        @default(true)
  firstName           	 String?    	 
  surname             	 String?   	 
  gender              	 String?    	 
  dateOfBirth         	 DateTime?
  professionalOrStudent  String?
  workplace           	 String?
  jobTitle            	 String?
  levelOfStudy        	 String?
  course              	 String?
  role               Role           @default(USER)
  accounts           Account[]
  bans               BannedUsers[]  @relation("bannedBy")
  BannedUsers        BannedUsers?
  bookmarks          Bookmark[]
  comments           Comment[]
  flaggedNotifier    Flagged[]      @relation("notifier")
  Flagged            Flagged[]
  likes              Like[]
  memberships        Membership[]
  notfier            Notification[] @relation("notifier")
  notification       Notification[]
  posts              Post[]
  RSVP               RSVP[]
  sessions           Session[]

  @@index([username, id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bookmark {
  id     Int    @id @default(autoincrement())
  postId String
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id           Int            @id @default(autoincrement())
  body         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  postId       String
  userId       String
  parentId     Int?
  parent       Comment?       @relation("Comment_Children", fields: [parentId], references: [id], onDelete: Cascade)
  children     Comment[]      @relation("Comment_Children")
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Flagged      Flagged[]
  likes        Like[]
  Notification Notification[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    String
  postId    String?
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@unique([userId, postId])
}

model Notification {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  type       Int
  userId     String
  postId     String?
  commentId  Int?
  notifierId String?
  comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  notifier   User?    @relation("notifier", fields: [notifierId], references: [id], onDelete: Cascade)
  post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BannedUsers {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String   @unique
  bannedById String
  note       String?
  bannedBy   User     @relation("bannedBy", fields: [bannedById], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Flagged {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  notifierId String
  note       String?
  postId     String?
  commentId  Int?
  comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  notifier   User     @relation("notifier", fields: [notifierId], references: [id], onDelete: Cascade)
  post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Community {
  id          String       @id @unique
  name        String
  city        String
  country     String
  coverImage  String
  description String
  excerpt     String       @default("") @db.VarChar(156)
  slug        String       @unique
  events      Event[]
  members     Membership[]
}

model Event {
  id          String    @id @unique
  eventDate   DateTime?
  name        String
  coverImage  String
  capacity    Int
  description String
  address     String
  slug        String    @unique
  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  RSVP        RSVP[]
}

model Membership {
  id               String    @id
  communityId      String
  userId           String
  isEventOrganiser Boolean   @default(false)
  createdAt        DateTime  @default(now())
  community        Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RSVP {
  id        String   @id
  eventId   String
  userId    String
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  MODERATOR
}